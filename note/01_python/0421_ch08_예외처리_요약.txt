# 1절. 예외처리
	- 예외가 발생할 가능성이 있는 부분에 대해 미리 예상하고, 그에 대한 처리를 프로그래밍 하는것
    	이유 : 좀 더 안정적으로 실행)
```
	ex. 파일을 다룰 때 : 파일이 없거나, 쓰기 금지로 인한 오류
	ex. 데이터베잇 프로그래밍 시 제약조건 등으로 CRUD(CREATE, READ, UPDATE, DELETE) 오류
	ex. 네트워크 프로그래밍 시 일시적인 네트워크 장애 시 연결 실패 오류
	ex. 리스트나 튜플의 인덱스를 벗어난 오류
```

# 2절. try ~ except로 예외처리
	## 2.1 try ~except
```
		try:
  		  예외가 발새할 가능성이 있는 명령어들
		except:
    		예외가 발생했을 경우 실행할 명령어들
```

	## 2.2 예외를 지정한 처리
```
		try :
 		    예외가 발생할 수도 있는 문장들
		except 예외타입1:
		    해당 예외가 발생할 경우 실행할 문장
		except 예외타입2:
   		 해당 예외가 발생할 경우 실행할 문장
    
```

	## 2.3 예외메세지(예외인수)
		try :
   		 예외가 발생할 수도 있는 구문
		except [예외타입 as e] :
 		   예외가 발생되면 수행할 구문
		else :
		    try절을 수행하다 예외가 발생 안되면 else절을 한번 수행
		finally :
		    예외가 발생 안하면 try-else-finally절 수행
		    예외가 발생하면 try 수행 중 except-finally절 수행
```

# 3절. raise
	- 강제 예외 발생

# 4절. 추상클래스
	- 추상클래스 : 객체를 생성할 수 없는 클래스. 상속받을 클래스의 포맷 제공
	- 추상메소드 : 호출할 수 없는 메소드

# 5절. 파일 정리 작업(with 절 이용)
	with open('data/ch08.txt', 'r') as f : # with 절
   		 print(f.read())
	# with절 이후 자동 close() 실행