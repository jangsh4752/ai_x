5절. 연산자
	5.1 산술연산자 : +, -, *, /, //(몫), %(나머지), **(제곱) 
	5.2 할당연산자 : =, +=, -=, *=, /=, //=, %=
		- C언어, Java 처럼 ++, -- 등의 연산자 없음
	5.3 논리연산자 : &,and, |, or, not(부정)
		- &, | 은 연산자 양쪽에 논리형이 있어야함. 없을 경우 비트연산자로 작동
		- and/or 은 True/False인지 아닌지 판별(False/True가 확인되면 앞,뒤에 뭐가 있던 False/True 처리)
	5.4 비교연산자 : >, >=, <, <=, ==(같다), !=(다르다)
		- 비교연산자(<)의 우선순위는 논리연산자(& 등)보다 낮음
		- and 등으로 비교연산 가능하나 &,|를 주로 씀. 다만 우선순위로 인해 () 사용에 주의
		- 문자 비교 : ASCII 코드 순으로 비교 가능 : 특수문자 < 숫자 < 대문자 < 소문자
	5.5 비트 연산자
6절. 문자열 다루기
	- 문자열 슬라이싱 : 변수[from:stop:step]
	- len(문자열변수) : 문자갯수 반환
	- upper() : 대문자로 변환
	- lower() : 소문자로 변환
	- title() : 각 어절의 첫 글자만 대문자로
	- capitalize() : 첫문자만 대문자로
	- count('찾을 문자열') : '찾을 문자열'이 몇개 들어 있는지 갯수 반환
	- find('찾을 문자열') : 찾을 문자열이 왼쪽부터 시작하여 몇 번째 인덱스에 있는지 체크, 인덱스 반환
	- rfind('찾을 문자열') : 찾을 문자열이 오른쪽부터 시작하여 몇 번째에 있는지 체크, 인덱스 반환
	        **찾을 문자열이 없으면 -1 반환**
	- cf) index('찾을 문자열') : 찾을 문자열의 인데스를 반환. 찾을 문자열이 없으면 오류
	- startswith('특정 문자열') : 특정문자열로 시작하는지 여부
	- endswith('특정 문자열') : 특정문자열로 끝나는지 여부
	- strip() : 좌우 공백 제거(문자열 내부 공백은 제거 X)
	- rstrip() : 오른쪽 공백 제거
	- lstrip() : 왼쪽 공백 제거
	- isdigit() : 문자열이 숫자문자열인지 여부 "100"
	- islower() : 소문자 문자열인지 여부
	- isupper() : 대문자 문자열인지 여부
	- replace(oldStr, newStr) : oldStr을 newStr로 변경
	- split(구분자) : 구분자를 이용해 문자 분리(기본값 : \s(space), 리스트로 반환)
	- join(리스트) : 리스트를 연결